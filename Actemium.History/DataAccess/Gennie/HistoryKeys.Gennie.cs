using System;
using System.Text;
using System.Data.Common;
using System.Collections.Generic;
using Actemium.Diagnostics;
using Actemium.Data.Common;
using Actemium.Data.Exceptions;

namespace Actemium.History.DataAccess
{
  /// <summary>
  /// Data access to the data in table HistoryKeys in the database (Generated by Gennie)
  /// </summary>
  public partial class HistoryKeys : HistoryKeysGennie
	{
		private const string CLASSNAME = nameof(HistoryKeys);

	}

	/// <summary>
	/// Data access to the data in table HistoryKeysGennie in the database (Generated by Gennie)
	/// </summary>
	public abstract class HistoryKeysGennie
	{
		private const string CLASSNAME = nameof(HistoryKeysGennie);


		/// <summary>
		/// Add a new HistoryKey to the database
		/// </summary>
		public virtual void Add(Model.HistoryKey newHistoryKey)
		{
			try
			{
				Trace.WriteVerbose("({0})", "Add", CLASSNAME, newHistoryKey.ToString());
				var helper = Database.GetDbHelper();


				int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Add,
					helper.CreateInputParam("@HistoryKey", newHistoryKey.HistoryKey),
					helper.CreateInputParam("@ShowInClient", newHistoryKey.ShowInClient),
					helper.CreateInputParam("@SaveInDatabase", newHistoryKey.SaveInDatabase),
					helper.CreateInputParam("@TraceLevel", newHistoryKey.TraceLevel));

				if (recordsAffected == 0)
					throw new DalNothingUpdatedException("Unable to add HistoryKey with HistoryKey={0}", newHistoryKey);

return;
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "Add", CLASSNAME, ex, newHistoryKey.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Add = "[HIST].[HistoryKeysGennie_Add]";
		


		/// <summary>
		/// Delete the given HistoryKey from the database
		/// </summary>
		public virtual void Delete(Model.HistoryKey historyKey)
		{
			try
			{
				Trace.WriteVerbose("({0})", "Delete", CLASSNAME, historyKey.ToString());

        var helper = Database.GetDbHelper();
				helper.ExecuteSPNonQuery(_storedProcedure_Delete,
					helper.CreateInputParam("@HistoryKey", historyKey.HistoryKey));
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "Delete", CLASSNAME, ex, historyKey.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Delete = "[HIST].[HistoryKeysGennie_Delete]";



		/// <summary>
		/// Modify the given HistoryKey in the database
		/// </summary>
		public virtual void Modify(Model.HistoryKey modifiedHistoryKey)
		{
			try
			{
				Trace.WriteVerbose("({0})", "Modify", CLASSNAME, modifiedHistoryKey.ToString());

				var helper = Database.GetDbHelper();
        int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Modify,
					helper.CreateInputParam("@HistoryKey", modifiedHistoryKey.HistoryKey),
					helper.CreateInputParam("@ShowInClient", modifiedHistoryKey.ShowInClient),
					helper.CreateInputParam("@SaveInDatabase", modifiedHistoryKey.SaveInDatabase),
					helper.CreateInputParam("@TraceLevel", modifiedHistoryKey.TraceLevel));

				if (recordsAffected == 0)
				{
					throw new DalNothingUpdatedException("No records were updated (Table: HistoryKeys). HistoryKey=" + modifiedHistoryKey.ToString());
				}
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "Modify", CLASSNAME, ex, modifiedHistoryKey.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}
		
            /// <summary>
            /// String containing stored procedure name
            /// </summary>
	    protected string _storedProcedure_Modify = "[HIST].[HistoryKeysGennie_Modify]";
		
	/// <summary>
	/// Modify only the specified properties of the HistoryKey 
	/// specified by:
	/// </summary>
		/// <param name="historyKey">PK</param>
	/// <param name="propValues">Properties to update</param>
		public virtual void Modify( String historyKey,  params KeyValuePair<string,object>[] propValues)
		{
			 try
      {
        Trace.WriteVerbose("({0})", "Modify", CLASSNAME, historyKey);
        
        if (propValues.Length == 0)
        {
			Trace.WriteVerbose("No properties to update.", "Modify", CLASSNAME);
			return;
		}
        
        var helper = Database.GetDbHelper();
        StringBuilder sqlStatement =  new StringBuilder("UPDATE [HIST].[HistoryKeys] SET ");
        List<DbParameter> parameterList = new List<DbParameter>();
        for (int i = 0; i < propValues.Length ; i++)
        { 
          sqlStatement.AppendFormat( "[{0}]=@{0}", propValues[i].Key);
          if (i< propValues.Length -1)
            sqlStatement.Append( ", ");

          parameterList.Add(helper.CreateInputParam("@" + propValues[i].Key, propValues[i].Value ?? DBNull.Value));
          
        }
        sqlStatement.Append(" WHERE ");
         sqlStatement.Append("[HistoryKey]=@HistoryKey");
			     parameterList.Add( helper.CreateInputParam("@HistoryKey", historyKey));
			

              int recordsAffected = helper.ExecuteText(sqlStatement.ToString(),
                                              parameterList.ToArray());
        
        if (recordsAffected == 0)
        {
          throw new DalNothingUpdatedException(string.Format("No records were updated (Table: HistoryKeys). Id={0}", historyKey));
        }

      }
      catch (Exception ex)
      {
        Trace.WriteError("({0})", "Modify", CLASSNAME, ex, historyKey);
        throw DbHelper.TranslateException(ex);
      }

      }



		/// <summary>
		/// Get a HistoryKey by id from the database
		/// </summary>
		public virtual Model.HistoryKey GetById(String historyKey)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
                
        reader = helper.ExecuteSPReader(_storedProcedure_GetById,
					helper.CreateInputParam("@HistoryKey", historyKey));
				
				Model.HistoryKey result = null;

				if (reader.Read())
          result = CreateHistoryKey(reader);

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("{0}", "GetById", CLASSNAME, ex, historyKey);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				reader?.Close();
			}
		}
		
    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetById = "[HIST].[HistoryKeysGennie_GetById]";


		
		/// <summary>
		/// Get all HistoryKey records from the database
		/// </summary>
		public virtual List<Model.HistoryKey> GetAll()
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetAll);
								
				List<Model.HistoryKey> result = new List<Model.HistoryKey>();
				while (reader.Read())
				{
				  result.Add(CreateHistoryKey(reader));
				}
				
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", "GetAll", CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				reader?.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetAll = "[HIST].[HistoryKeysGennie_GetAll]";
		
		
		
		/// <summary>
		/// Create a Model.HistoryKey
		/// </summary>
		protected virtual Model.HistoryKey CreateHistoryKey(DbDataReader reader)
		{
			try
			{	
        Model.HistoryKey result = new Model.HistoryKey(
          (String)reader["HistoryKey"], 
          (Boolean)reader["ShowInClient"], 
          (Boolean)reader["SaveInDatabase"], 
          (String)reader["TraceLevel"]
						);
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("", "CreateHistoryKey", CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
		}	
	}
}
