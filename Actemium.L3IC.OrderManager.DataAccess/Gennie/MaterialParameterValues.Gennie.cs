using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Actemium.Diagnostics;
using Actemium.Data.Common;
using Actemium.Data.Exceptions;

namespace Actemium.L3IC.OrderManager.DataAccess
{
	/// <summary>
	/// Data access to the data in table MaterialParameterValues in the database (Generated by Gennie)
	/// Description: The value of the material specific parameters
	/// </summary>
	public partial class MaterialParameterValues : MaterialParameterValuesGennie
	{
		private const string CLASSNAME = nameof(MaterialParameterValues);

	}

	/// <summary>
	/// Data access to the data in table MaterialParameterValuesGennie in the database (Generated by Gennie)
	/// </summary>
	public abstract class MaterialParameterValuesGennie
	{
		private const string CLASSNAME = nameof(MaterialParameterValuesGennie);


		/// <summary>
		/// Add a new MaterialParameterValue to the database
		/// </summary>
		public virtual Int32 Add(Model.MaterialParameterValue newMaterialParameterValue)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, newMaterialParameterValue.ToString());
				var helper = Database.GetDbHelper();
				DbParameter IdParam = helper.CreateOutputParam("@Id", DbType.Int32);

				int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Add,
					IdParam,
					helper.CreateInputParam("@MaterialId", newMaterialParameterValue.MaterialId),
					helper.CreateInputParam("@MaterialParameterId", newMaterialParameterValue.MaterialParameterId),
					helper.CreateInputParam("@Value", newMaterialParameterValue.Value));

				if (recordsAffected == 0)
					throw new DalNothingUpdatedException("Unable to add MaterialParameterValue with Id={0}", newMaterialParameterValue);

				return (Int32)IdParam.Value;
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, newMaterialParameterValue.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Add = "[dbo].[MaterialParameterValuesGennie_Add]";
		


		/// <summary>
		/// Delete the given MaterialParameterValue from the database
		/// </summary>
		public virtual void Delete(Model.MaterialParameterValue materialParameterValue)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, materialParameterValue.ToString());

        var helper = Database.GetDbHelper();
				helper.ExecuteSPNonQuery(_storedProcedure_Delete,
					helper.CreateInputParam("@Id", materialParameterValue.Id));
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, materialParameterValue.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Delete = "[dbo].[MaterialParameterValuesGennie_Delete]";



		/// <summary>
		/// Modify the given MaterialParameterValue in the database
		/// </summary>
		public virtual void Modify(Model.MaterialParameterValue modifiedMaterialParameterValue)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, modifiedMaterialParameterValue.ToString());

				var helper = Database.GetDbHelper();
        int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Modify,
					helper.CreateInputParam("@Id", modifiedMaterialParameterValue.Id),
					helper.CreateInputParam("@MaterialId", modifiedMaterialParameterValue.MaterialId),
					helper.CreateInputParam("@MaterialParameterId", modifiedMaterialParameterValue.MaterialParameterId),
					helper.CreateInputParam("@Value", modifiedMaterialParameterValue.Value));

				if (recordsAffected == 0)
				{
					throw new DalNothingUpdatedException("No records were updated (Table: MaterialParameterValues). MaterialParameterValue=" + modifiedMaterialParameterValue.ToString());
				}
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, modifiedMaterialParameterValue.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}
		
            /// <summary>
            /// String containing stored procedure name
            /// </summary>
	    protected string _storedProcedure_Modify = "[dbo].[MaterialParameterValuesGennie_Modify]";
		
	/// <summary>
	/// Modify only the specified properties of the MaterialParameterValue 
	/// specified by:
	/// </summary>
		/// <param name="id">PK</param>
	/// <param name="propValues">Properties to update</param>
		public virtual void Modify( Int32 id,  params KeyValuePair<string,object>[] propValues)
		{
			 try
      {
        Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, id);
        
        if (propValues.Length == 0)
        {
			Trace.WriteVerbose("No properties to update.", Trace.GetMethodName(), CLASSNAME);
			return;
		}
        
        var helper = Database.GetDbHelper();
        StringBuilder sqlStatement =  new StringBuilder("UPDATE [dbo].[MaterialParameterValues] SET ");
        List<DbParameter> parameterList = new List<DbParameter>();
        for (int i = 0; i < propValues.Length ; i++)
        { 
          sqlStatement.AppendFormat( "[{0}]=@{0}", propValues[i].Key);
          if (i< propValues.Length -1)
            sqlStatement.Append( ", ");

          parameterList.Add(helper.CreateInputParam("@" + propValues[i].Key, propValues[i].Value != null ? propValues[i].Value : DBNull.Value));
          
        }
        sqlStatement.Append(" WHERE ");
         sqlStatement.Append("[Id]=@Id");
			     parameterList.Add( helper.CreateInputParam("@Id", id));
			

              int recordsAffected = helper.ExecuteText(sqlStatement.ToString(),
                                              parameterList.ToArray());
        
        if (recordsAffected == 0)
        {
          throw new DalNothingUpdatedException(string.Format("No records were updated (Table: MaterialParameterValues). Id={0}", id));
        }

      }
      catch (Exception ex)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, id);
        throw DbHelper.TranslateException(ex);
      }

      }



		/// <summary>
		/// Get a MaterialParameterValue by id from the database
		/// </summary>
		public virtual Model.MaterialParameterValue GetById(Int32 id)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
                
        reader = helper.ExecuteSPReader(_storedProcedure_GetById,
					helper.CreateInputParam("@Id", id));
				
				Model.MaterialParameterValue result = null;

				if (reader.Read())
          result = CreateMaterialParameterValue(reader);

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("{0}", Trace.GetMethodName(), CLASSNAME, ex, id);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetById = "[dbo].[MaterialParameterValuesGennie_GetById]";



		/// <summary>
		/// Get a MaterialParameterValue by MaterialId from the database
		/// </summary>
		public virtual List<Model.MaterialParameterValue> GetByMaterialId(Int32 materialId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetByMaterialId, 
					helper.CreateInputParam("@MaterialId", materialId));
                
        List<Model.MaterialParameterValue> result = new List<Model.MaterialParameterValue>();
				while (reader.Read())
				{
				  result.Add(CreateMaterialParameterValue(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, materialId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetByMaterialId = "[dbo].[MaterialParameterValuesGennie_GetByMaterialId]";
		
		

		/// <summary>
		/// Get a MaterialParameterValue by MaterialParameterId from the database
		/// </summary>
		public virtual List<Model.MaterialParameterValue> GetByMaterialParameterId(Int32 materialParameterId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetByMaterialParameterId, 
					helper.CreateInputParam("@MaterialParameterId", materialParameterId));
                
        List<Model.MaterialParameterValue> result = new List<Model.MaterialParameterValue>();
				while (reader.Read())
				{
				  result.Add(CreateMaterialParameterValue(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, materialParameterId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetByMaterialParameterId = "[dbo].[MaterialParameterValuesGennie_GetByMaterialParameterId]";
		
		
		
		/// <summary>
		/// Get all MaterialParameterValue records from the database
		/// </summary>
		public virtual List<Model.MaterialParameterValue> GetAll()
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetAll);
								
				List<Model.MaterialParameterValue> result = new List<Model.MaterialParameterValue>();
				while (reader.Read())
				{
				  result.Add(CreateMaterialParameterValue(reader));
				}
				
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", Trace.GetMethodName(), CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetAll = "[dbo].[MaterialParameterValuesGennie_GetAll]";
		
		
		
		/// <summary>
		/// Create a Model.MaterialParameterValue
		/// </summary>
		protected virtual Model.MaterialParameterValue CreateMaterialParameterValue(DbDataReader reader)
		{
			try
			{	
        Model.MaterialParameterValue result = new Model.MaterialParameterValue(
          (Int32)reader["Id"], 
          (Int32)reader["MaterialId"], 
          (Int32)reader["MaterialParameterId"], 
          (String)reader["Value"]
						);
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("", Trace.GetMethodName(), CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
		}	
	}
}