using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Actemium.Diagnostics;
using Actemium.Data.Common;
using Actemium.Data.Exceptions;

namespace Actemium.L3IC.OrderManager.DataAccess
{
	/// <summary>
	/// Data access to the data in table BomItems in the database (Generated by Gennie)
	/// Description: Items that are on the Bill Of Material
	/// </summary>
	public partial class BomItems : BomItemsGennie
	{
		private const string CLASSNAME = nameof(BomItems);

	}

	/// <summary>
	/// Data access to the data in table BomItemsGennie in the database (Generated by Gennie)
	/// </summary>
	public abstract class BomItemsGennie
	{
		private const string CLASSNAME = nameof(BomItemsGennie);


		/// <summary>
		/// Add a new BomItem to the database
		/// </summary>
		public virtual Int32 Add(Model.BomItem newBomItem)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, newBomItem.ToString());
				var helper = Database.GetDbHelper();
				DbParameter IdParam = helper.CreateOutputParam("@Id", DbType.Int32);

				int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Add,
					IdParam,
					helper.CreateInputParam("@OrderId", newBomItem.OrderId),
					helper.CreateInputParam("@MaterialId", newBomItem.MaterialId),
					helper.CreateInputParam("@Quantity", newBomItem.Quantity),
					helper.CreateInputParam("@UOM", newBomItem.UOM));

				if (recordsAffected == 0)
					throw new DalNothingUpdatedException("Unable to add BomItem with Id={0}", newBomItem);

				return (Int32)IdParam.Value;
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, newBomItem.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Add = "[dbo].[BomItemsGennie_Add]";
		


		/// <summary>
		/// Delete the given BomItem from the database
		/// </summary>
		public virtual void Delete(Model.BomItem bomItem)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, bomItem.ToString());

        var helper = Database.GetDbHelper();
				helper.ExecuteSPNonQuery(_storedProcedure_Delete,
					helper.CreateInputParam("@Id", bomItem.Id));
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, bomItem.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Delete = "[dbo].[BomItemsGennie_Delete]";



		/// <summary>
		/// Modify the given BomItem in the database
		/// </summary>
		public virtual void Modify(Model.BomItem modifiedBomItem)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, modifiedBomItem.ToString());

				var helper = Database.GetDbHelper();
        int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Modify,
					helper.CreateInputParam("@Id", modifiedBomItem.Id),
					helper.CreateInputParam("@OrderId", modifiedBomItem.OrderId),
					helper.CreateInputParam("@MaterialId", modifiedBomItem.MaterialId),
					helper.CreateInputParam("@Quantity", modifiedBomItem.Quantity),
					helper.CreateInputParam("@UOM", modifiedBomItem.UOM));

				if (recordsAffected == 0)
				{
					throw new DalNothingUpdatedException("No records were updated (Table: BomItems). BomItem=" + modifiedBomItem.ToString());
				}
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, modifiedBomItem.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}
		
            /// <summary>
            /// String containing stored procedure name
            /// </summary>
	    protected string _storedProcedure_Modify = "[dbo].[BomItemsGennie_Modify]";
		
	/// <summary>
	/// Modify only the specified properties of the BomItem 
	/// specified by:
	/// </summary>
		/// <param name="id">PK</param>
	/// <param name="propValues">Properties to update</param>
		public virtual void Modify( Int32 id,  params KeyValuePair<string,object>[] propValues)
		{
			 try
      {
        Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, id);
        
        if (propValues.Length == 0)
        {
			Trace.WriteVerbose("No properties to update.", Trace.GetMethodName(), CLASSNAME);
			return;
		}
        
        var helper = Database.GetDbHelper();
        StringBuilder sqlStatement =  new StringBuilder("UPDATE [dbo].[BomItems] SET ");
        List<DbParameter> parameterList = new List<DbParameter>();
        for (int i = 0; i < propValues.Length ; i++)
        { 
          sqlStatement.AppendFormat( "[{0}]=@{0}", propValues[i].Key);
          if (i< propValues.Length -1)
            sqlStatement.Append( ", ");

          parameterList.Add(helper.CreateInputParam("@" + propValues[i].Key, propValues[i].Value != null ? propValues[i].Value : DBNull.Value));
          
        }
        sqlStatement.Append(" WHERE ");
         sqlStatement.Append("[Id]=@Id");
			     parameterList.Add( helper.CreateInputParam("@Id", id));
			

              int recordsAffected = helper.ExecuteText(sqlStatement.ToString(),
                                              parameterList.ToArray());
        
        if (recordsAffected == 0)
        {
          throw new DalNothingUpdatedException(string.Format("No records were updated (Table: BomItems). Id={0}", id));
        }

      }
      catch (Exception ex)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, id);
        throw DbHelper.TranslateException(ex);
      }

      }



		/// <summary>
		/// Get a BomItem by id from the database
		/// </summary>
		public virtual Model.BomItem GetById(Int32 id)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
                
        reader = helper.ExecuteSPReader(_storedProcedure_GetById,
					helper.CreateInputParam("@Id", id));
				
				Model.BomItem result = null;

				if (reader.Read())
          result = CreateBomItem(reader);

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("{0}", Trace.GetMethodName(), CLASSNAME, ex, id);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetById = "[dbo].[BomItemsGennie_GetById]";



		/// <summary>
		/// Get a BomItem by OrderId from the database
		/// </summary>
		public virtual List<Model.BomItem> GetByOrderId(Int32 orderId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetByOrderId, 
					helper.CreateInputParam("@OrderId", orderId));
                
        List<Model.BomItem> result = new List<Model.BomItem>();
				while (reader.Read())
				{
				  result.Add(CreateBomItem(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, orderId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetByOrderId = "[dbo].[BomItemsGennie_GetByOrderId]";
		
		

		/// <summary>
		/// Get a BomItem by MaterialId from the database
		/// </summary>
		public virtual List<Model.BomItem> GetByMaterialId(Int32 materialId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetByMaterialId, 
					helper.CreateInputParam("@MaterialId", materialId));
                
        List<Model.BomItem> result = new List<Model.BomItem>();
				while (reader.Read())
				{
				  result.Add(CreateBomItem(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, materialId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetByMaterialId = "[dbo].[BomItemsGennie_GetByMaterialId]";
		
		
		
		/// <summary>
		/// Get all BomItem records from the database
		/// </summary>
		public virtual List<Model.BomItem> GetAll()
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetAll);
								
				List<Model.BomItem> result = new List<Model.BomItem>();
				while (reader.Read())
				{
				  result.Add(CreateBomItem(reader));
				}
				
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", Trace.GetMethodName(), CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetAll = "[dbo].[BomItemsGennie_GetAll]";
		
		
		
		/// <summary>
		/// Create a Model.BomItem
		/// </summary>
		protected virtual Model.BomItem CreateBomItem(DbDataReader reader)
		{
			try
			{	
        Model.BomItem result = new Model.BomItem(
          (Int32)reader["Id"], 
          (Int32)reader["OrderId"], 
          (Int32)reader["MaterialId"], 
          (Decimal)reader["Quantity"], 
          (String)reader["UOM"]
						);
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("", Trace.GetMethodName(), CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
		}	
	}
}