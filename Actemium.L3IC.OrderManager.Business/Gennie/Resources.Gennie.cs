using System;
using System.Collections.Generic;
using Actemium.Data.Exceptions;
using Actemium.Diagnostics;
using Actemium.UserManagement2.Business;

namespace Actemium.L3IC.OrderManager.Business
{
	/// <summary>
	/// Business class for Resources (Generated by Gennie).
	/// Description: The resources that are present in the plant for needed for production
	/// </summary>
	public sealed partial class Resources : ResourcesGennie
	{
		private const string CLASSNAME = nameof(Resources);

		
		public static readonly Resources Instance = new Resources();
	}

	/// <summary>
	/// Business class for ResourcesGennie (Generated by Gennie).
	/// </summary>
	public abstract class ResourcesGennie
	{
		private const string CLASSNAME = nameof(ResourcesGennie);
		
 		/// <summary>
		/// Add a new Resource to the database
		/// </summary>
		public virtual Int32 Add(Model.Resource newResource)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, newResource);

				CheckConstraints(newResource);
				DataAccess.Resources resources = new DataAccess.Resources();

        return resources.Add(newResource);
			}
			catch (DalForeignKeyException ex_fk)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex_fk, newResource);
        throw new BusinessException(string.Format("No related object found in {0}", ex_fk.Table), ex_fk);
      }
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, newResource);
				throw;
			}
		}


		/// <summary>
		/// Check Datafield constraints
		/// </summary>
		protected virtual void CheckConstraints(Model.Resource resource)
		{
			//Range checks, etc checks go here
			if (resource.Code == null)
			  throw new BusinessException(string.Format("Code may not be NULL. ({0})", resource.Code));

			if (resource.Code.Length > 50)
			  throw new BusinessException(string.Format("Code may not be longer than 50 characters. ({0})", resource.Code));

			if (resource.Description == null)
			  throw new BusinessException(string.Format("Description may not be NULL. ({0})", resource.Description));

			if (resource.Description.Length > 50)
			  throw new BusinessException(string.Format("Description may not be longer than 50 characters. ({0})", resource.Description));

		}


		/// <summary>
		/// Delete the given Resource from the database
		/// </summary>
		public virtual void Delete(Model.Resource delResource)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, delResource);

				//Begin Checks
				if (!Exists(delResource))
					throw new BusinessException(string.Format("There is no Resource with this id. ({0})", delResource));

				DataAccess.Resources resources = new DataAccess.Resources();
				resources.Delete(delResource);
			}
			catch (DalForeignKeyException ex_fk)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex_fk, delResource);
        throw new BusinessException(string.Format("The Resource is still used by {0}", ex_fk.Table), ex_fk);
      }
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, delResource);
				throw;
			}
		}


		/// <summary>
		/// Modify the given Resource in the database
		/// </summary>
		public virtual void Modify(Model.Resource modifiedResource)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, modifiedResource);

				//Begin Checks
				CheckConstraints(modifiedResource);

				if (!Exists(modifiedResource))
					throw new BusinessException(string.Format("There is no Resource with this id. ({0})", modifiedResource));

				DataAccess.Resources resources = new DataAccess.Resources();
				resources.Modify(modifiedResource);
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, modifiedResource);
				throw;
			}
		}
		
		/// <summary>
		/// Modify only the specified properties of the Resource 
		/// specified by:
		/// </summary>
		/// <param name="id">PK</param>
	    /// <param name="propValues">Properties to change</param>
		public virtual void Modify(Int32 id,  params KeyValuePair<string,object>[] propValues)
		{
			try
			{
				Trace.WriteInformation("({0}, {1})", Trace.GetMethodName(), CLASSNAME, id, string.Join(",", propValues));

				DataAccess.Resources resources = new DataAccess.Resources();
				resources.Modify(
				id, 
				propValues);
				return;
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, id);
				throw;
			}
		}


		/// <summary>
		/// Get all Resource records from the database
		/// </summary>
		public virtual List<Model.Resource> GetAll()
		{
			try
			{
				DataAccess.Resources resources = new DataAccess.Resources();
				List<Model.Resource> result = resources.GetAll();

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", Trace.GetMethodName(), CLASSNAME, ex);
				throw;
			}
		}


		/// <summary>
		/// Get a Resource by id from the database
		/// </summary>
		public virtual Model.Resource GetById(Int32 id)
		{
		  try
			{
		    DataAccess.Resources resources = new DataAccess.Resources();
				Model.Resource result = resources.GetById(id);
			  return result;
			}
			catch (Exception ex)
			{
			  Trace.WriteError("{0}", Trace.GetMethodName(), CLASSNAME, ex, id);
			  throw;
			}
		}



		/// <summary>
		/// Equals function to compare class
		/// </summary> 
		public virtual bool Exists(Model.Resource resource)
		{
		  try
			{
				return (this.GetById(resource.Id) != null);
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, resource);
				throw;
			}
		}


		/// <summary>
		/// Equals function to compare class
		/// </summary> 
		public virtual bool Exists(Int32 id )
		{
		  try
		  {
				DataAccess.Resources resources = new DataAccess.Resources();
				return resources.GetById(id) != null;
			}
		  catch (Exception ex)
			{
			  Trace.WriteError("{0}", Trace.GetMethodName(), CLASSNAME, ex, id);
				throw;
			}
		}    

	}
}