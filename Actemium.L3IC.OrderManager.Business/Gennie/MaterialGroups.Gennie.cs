using System;
using System.Collections.Generic;
using Actemium.Data.Exceptions;
using Actemium.Diagnostics;
using Actemium.UserManagement2.Business;

namespace Actemium.L3IC.OrderManager.Business
{
	/// <summary>
	/// Business class for MaterialGroups (Generated by Gennie).
	/// Description: All groups of material needed for production. Both raw as finished good material groups are defined in this table
	/// </summary>
	public sealed partial class MaterialGroups : MaterialGroupsGennie
	{
		private const string CLASSNAME = nameof(MaterialGroups);

		
		public static readonly MaterialGroups Instance = new MaterialGroups();
	}

	/// <summary>
	/// Business class for MaterialGroupsGennie (Generated by Gennie).
	/// </summary>
	public abstract class MaterialGroupsGennie
	{
		private const string CLASSNAME = nameof(MaterialGroupsGennie);
		
 		/// <summary>
		/// Add a new MaterialGroup to the database
		/// </summary>
		public virtual void Add(Model.MaterialGroup newMaterialGroup)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, newMaterialGroup);

				CheckConstraints(newMaterialGroup);
				DataAccess.MaterialGroups materialGroups = new DataAccess.MaterialGroups();

        materialGroups.Add(newMaterialGroup);
			}
			catch (DalForeignKeyException ex_fk)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex_fk, newMaterialGroup);
        throw new BusinessException(string.Format("No related object found in {0}", ex_fk.Table), ex_fk);
      }
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, newMaterialGroup);
				throw;
			}
		}


		/// <summary>
		/// Check Datafield constraints
		/// </summary>
		protected virtual void CheckConstraints(Model.MaterialGroup materialGroup)
		{
			//Range checks, etc checks go here
			if (materialGroup.Code == null)
			  throw new BusinessException(string.Format("Code may not be NULL. ({0})", materialGroup.Code));

			if (materialGroup.Code.Length > 50)
			  throw new BusinessException(string.Format("Code may not be longer than 50 characters. ({0})", materialGroup.Code));

			if (materialGroup.Description == null)
			  throw new BusinessException(string.Format("Description may not be NULL. ({0})", materialGroup.Description));

			if (materialGroup.Description.Length > 50)
			  throw new BusinessException(string.Format("Description may not be longer than 50 characters. ({0})", materialGroup.Description));

		}


		/// <summary>
		/// Delete the given MaterialGroup from the database
		/// </summary>
		public virtual void Delete(Model.MaterialGroup delMaterialGroup)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, delMaterialGroup);

				//Begin Checks
				if (!Exists(delMaterialGroup))
					throw new BusinessException(string.Format("There is no MaterialGroup with this id. ({0})", delMaterialGroup));

				DataAccess.MaterialGroups materialGroups = new DataAccess.MaterialGroups();
				materialGroups.Delete(delMaterialGroup);
			}
			catch (DalForeignKeyException ex_fk)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex_fk, delMaterialGroup);
        throw new BusinessException(string.Format("The MaterialGroup is still used by {0}", ex_fk.Table), ex_fk);
      }
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, delMaterialGroup);
				throw;
			}
		}


		/// <summary>
		/// Modify the given MaterialGroup in the database
		/// </summary>
		public virtual void Modify(Model.MaterialGroup modifiedMaterialGroup)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, modifiedMaterialGroup);

				//Begin Checks
				CheckConstraints(modifiedMaterialGroup);

				if (!Exists(modifiedMaterialGroup))
					throw new BusinessException(string.Format("There is no MaterialGroup with this id. ({0})", modifiedMaterialGroup));

				DataAccess.MaterialGroups materialGroups = new DataAccess.MaterialGroups();
				materialGroups.Modify(modifiedMaterialGroup);
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, modifiedMaterialGroup);
				throw;
			}
		}
		
		/// <summary>
		/// Modify only the specified properties of the MaterialGroup 
		/// specified by:
		/// </summary>
		/// <param name="id">PK</param>
	    /// <param name="propValues">Properties to change</param>
		public virtual void Modify(Int32 id,  params KeyValuePair<string,object>[] propValues)
		{
			try
			{
				Trace.WriteInformation("({0}, {1})", Trace.GetMethodName(), CLASSNAME, id, string.Join(",", propValues));

				DataAccess.MaterialGroups materialGroups = new DataAccess.MaterialGroups();
				materialGroups.Modify(
				id, 
				propValues);
				return;
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, id);
				throw;
			}
		}


		/// <summary>
		/// Get all MaterialGroup records from the database
		/// </summary>
		public virtual List<Model.MaterialGroup> GetAll()
		{
			try
			{
				DataAccess.MaterialGroups materialGroups = new DataAccess.MaterialGroups();
				List<Model.MaterialGroup> result = materialGroups.GetAll();

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", Trace.GetMethodName(), CLASSNAME, ex);
				throw;
			}
		}


		/// <summary>
		/// Get a MaterialGroup by id from the database
		/// </summary>
		public virtual Model.MaterialGroup GetById(Int32 id)
		{
		  try
			{
		    DataAccess.MaterialGroups materialGroups = new DataAccess.MaterialGroups();
				Model.MaterialGroup result = materialGroups.GetById(id);
			  return result;
			}
			catch (Exception ex)
			{
			  Trace.WriteError("{0}", Trace.GetMethodName(), CLASSNAME, ex, id);
			  throw;
			}
		}



		/// <summary>
		/// Equals function to compare class
		/// </summary> 
		public virtual bool Exists(Model.MaterialGroup materialGroup)
		{
		  try
			{
				return (this.GetById(materialGroup.Id) != null);
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, materialGroup);
				throw;
			}
		}


		/// <summary>
		/// Equals function to compare class
		/// </summary> 
		public virtual bool Exists(Int32 id )
		{
		  try
		  {
				DataAccess.MaterialGroups materialGroups = new DataAccess.MaterialGroups();
				return materialGroups.GetById(id) != null;
			}
		  catch (Exception ex)
			{
			  Trace.WriteError("{0}", Trace.GetMethodName(), CLASSNAME, ex, id);
				throw;
			}
		}    

	}
}