<%@ Language=CSharp%><%
    // Define the name the outputcode should be written to
    //outputFile.PathName += (@"\DataAccess\" + dataObject.Schema );
    outputFile.PathName += (@"\Actemium.EmptyClient.DataAccess\Gennie" );
    outputFile.FileName = dataObject.Name + ".Gennie.cs";

    bool readOnly = false;
    if ((project["readOnly"] == "1") || (project["readOnly"].ToLower() == "true"))
       readOnly = true;

  	//String schemaNamespace = dataObject.Schema != "dbo" ? dataObject.Schema + "." : "";
  	String schemaNamespace = "";

	DataAttribute identityCol = null; 
	
	String AddParameters = "";
	foreach ( DataAttribute attribute in dataObject)
	{
	    if (AddParameters != "")
	        AddParameters += @",\r\n";
  	    if (attribute.IdentityColumn)
  	    {
		    identityCol = attribute;
		    AddParameters += string.Format("\t\t\t\t\t{0}Param", attribute.Name);
		}
		else
		{
		    AddParameters += string.Format("\t\t\t\t\thelper.CreateInputParam(\"@{0}\", new{1}.{2}", 
					GennieHelper.RemoveHungarianPrefix(attribute.Name), GennieHelper.Singularity(dataObject.Name), GennieHelper.PascalCase( attribute.Name, true,true));
	        if(attribute.NullAllowed)
	        {
	            if (attribute.Type != DataAttribute.DotNetTypeEnum.String)
	            {
	                AddParameters += string.Format(".HasValue ? (object)new{0}.{1} : DBNull.Value", 
	                    GennieHelper.Singularity(dataObject.Name), GennieHelper.PascalCase( attribute.Name, true,true));
	            } 
	            else 
	            {
	                AddParameters += string.Format(" != null ? (object)new{0}.{1} : DBNull.Value",
	                    GennieHelper.Singularity(dataObject.Name), GennieHelper.PascalCase( attribute.Name, true,true));
	            }
	        }
	        AddParameters += ")";
		}
    }
    AddParameters += ");";


    String AddReturnType = "";
    String identityVar = "";
    string returnLine = "";
    if (identityCol == null) 
    {
        AddReturnType = "void";
        returnLine = "return;";
    }
    else
    {
        AddReturnType = identityCol.Type.ToString();
        identityVar = String.Format("\t\t\t\tDbParameter {0}Param = helper.CreateOutputParam(\"@{1}\", DbType.{2});",
                        identityCol.Name, GennieHelper.RemoveHungarianPrefix( identityCol.Name), identityCol.Type);
        returnLine = string.Format("\t\t\t\treturn ({0}){1}Param.Value;", identityCol.Type, identityCol.Name);
    }

    // generation variable declarations

 AttributeCollection primaryKeys = dataObject.GetAll(DataAttributeField.PrimaryKey);

 string placeHolders = "";
 string parameters = "";

for(int i=0; i<primaryKeys.Count; i++)
{
    DataAttribute attribute = primaryKeys[i];
    placeHolders += "{" + i.ToString() + "}";
    parameters += GennieHelper.CamelCase(attribute.Name, true, true);
    if (i < primaryKeys.Count-1)
    {
        placeHolders += ",";
        parameters += ",";
    }
}

%>using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Actemium.Diagnostics;
using Actemium.Data.Common;
using Actemium.Data.Exceptions;

namespace <%=project["root-namespace"]%>.<%=schemaNamespace%>DataAccess
{
	/// <summary>
	/// Data access to the data in table <%=dataObject.Name%> in the database (Generated by Gennie)
<%if (dataObject.Description != null && dataObject.Description.Length > 0 && dataObject.Type != "view"){%>	/// Description: <%=dataObject.Description%>
<%}%>	/// </summary>
	public partial class <%=dataObject.Name%> : <%=dataObject.Name%>Gennie
	{
		private const string CLASSNAME = nameof(<%=dataObject.Name%>);

	}

	/// <summary>
	/// Data access to the data in table <%=dataObject.Name%>Gennie in the database (Generated by Gennie)
	/// </summary>
	public abstract class <%=dataObject.Name%>Gennie
	{
		private const string CLASSNAME = nameof(<%=dataObject.Name%>Gennie);

<%  if (dataObject.Type != "view" && !readOnly)
{  %>
		/// <summary>
		/// Add a new <%=GennieHelper.Singularity(dataObject.Name)%> to the database
		/// </summary>
		public virtual <%=AddReturnType%> Add(Model.<%=GennieHelper.Singularity(dataObject.Name)%> new<%=GennieHelper.Singularity(dataObject.Name)%>)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, new<%=GennieHelper.Singularity(dataObject.Name)%>.ToString());
				var helper = Database.GetDbHelper();
<%=identityVar%>

				int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Add,
<%=AddParameters%>

				if (recordsAffected == 0)
					throw new DalNothingUpdatedException("Unable to add <%=GennieHelper.Singularity(dataObject.Name)%> with <%=((dataObject.GetAll( DataAttributeField.PrimaryKey).Count > 0) ? GennieHelper.PascalCase(dataObject.GetAll(  DataAttributeField.PrimaryKey)[0].Name, true,true) : String.Empty)%>={0}", new<%=GennieHelper.Singularity(dataObject.Name)%>);

<%=returnLine%>
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, new<%=GennieHelper.Singularity(dataObject.Name)%>.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Add = "[<%=dataObject.Schema%>].[<%=dataObject.Name%>Gennie_Add]";
<% } //end   if (dataObject.Type != "view")%>		

<%  if (dataObject.GetAll( DataAttributeField.PrimaryKey).Count > 0 && !readOnly)
{ %>
		/// <summary>
		/// Delete the given <%=GennieHelper.Singularity(dataObject.Name)%> from the database
		/// </summary>
		public virtual void Delete(Model.<%=GennieHelper.Singularity(dataObject.Name)%> <%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, <%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>.ToString());

        var helper = Database.GetDbHelper();
				helper.ExecuteSPNonQuery(_storedProcedure_Delete,
				<%foreach (DataAttribute attribute in dataObject)
				if (attribute.PrimaryKey)
				{%>	helper.CreateInputParam("@<%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%>", <%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>.<%=GennieHelper.PascalCase( attribute.Name, true,true)%>)<%if (attribute != dataObject.GetAll(DataAttributeField.PrimaryKey)[dataObject.GetAll(DataAttributeField.PrimaryKey).Count -1 ]){%>,
				<%}}%>);
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, <%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Delete = "[<%=dataObject.Schema%>].[<%=dataObject.Name%>Gennie_Delete]";
<% } //end    if (dataObject.GetAll( DataAttributeField.PrimaryKey).Count > 0)%>

<%
if ((dataObject.GetAll( DataAttributeField.PrimaryKey).Count > 0) && (dataObject.Count > dataObject.GetAll( DataAttributeField.PrimaryKey).Count) && !readOnly)
{
%>
		/// <summary>
		/// Modify the given <%=GennieHelper.Singularity(dataObject.Name)%> in the database
		/// </summary>
		public virtual void Modify(Model.<%=GennieHelper.Singularity(dataObject.Name)%> modified<%=GennieHelper.Singularity(dataObject.Name)%>)
		{
			try
			{
				Trace.WriteVerbose("({0})", Trace.GetMethodName(), CLASSNAME, modified<%=GennieHelper.Singularity(dataObject.Name)%>.ToString());

				var helper = Database.GetDbHelper();
        int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Modify,
				<%foreach (DataAttribute attribute in dataObject)
				
				{%>	helper.CreateInputParam("@<%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%>", modified<%=GennieHelper.Singularity(dataObject.Name)%>.<%=GennieHelper.PascalCase( attribute.Name, true, true)%><%
				                if(attribute.NullAllowed)
				                {
				                 if (attribute.Type != DataAttribute.DotNetTypeEnum.String)
				                 {
				                    %>.HasValue ? (object)modified<%=GennieHelper.Singularity(dataObject.Name)%>.<%=GennieHelper.PascalCase( attribute.Name, true,true)%> : DBNull.Value<%
				                 } 
				                 else 
				                 {
				                    %> != null ? (object)modified<%=GennieHelper.Singularity(dataObject.Name)%>.<%=GennieHelper.PascalCase( attribute.Name, true,true)%> : DBNull.Value<%
				                 }
				                }%>)<%if (attribute != dataObject.Attribute[dataObject.Count -1 ]){%>,
				<%}}%>);

				if (recordsAffected == 0)
				{
					throw new DalNothingUpdatedException("No records were updated (Table: <%=dataObject.Name%>). <%=GennieHelper.Singularity(dataObject.Name)%>=" + modified<%=GennieHelper.Singularity(dataObject.Name)%>.ToString());
				}
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, modified<%=GennieHelper.Singularity(dataObject.Name)%>.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}
		
            /// <summary>
            /// String containing stored procedure name
            /// </summary>
	    protected string _storedProcedure_Modify = "[<%=dataObject.Schema%>].[<%=dataObject.Name%>Gennie_Modify]";
		
	/// <summary>
	/// Modify only the specified properties of the <%=GennieHelper.Singularity(dataObject.Name)%> 
	/// specified by:
	/// </summary>
		<%

		for(int i=0; i<primaryKeys.Count; i++)
    {
	    DataAttribute attribute = primaryKeys[i];
	    %>/// <param name="<%=GennieHelper.CamelCase(attribute.Name, true, true)%>">PK</param><%
	      }%>
	/// <param name="propValues">Properties to update</param>
		public virtual void Modify(<%
		
		for(int i=0; i<primaryKeys.Count; i++)
		{
			DataAttribute attribute = primaryKeys[i];
			%> <%=attribute.Type%> <%=GennieHelper.CamelCase(attribute.Name, true, true)%>, <%
	      }%> params KeyValuePair<string,object>[] propValues)
		{
			 try
      {
        Trace.WriteVerbose("(<%=placeHolders%>)", Trace.GetMethodName(), CLASSNAME, <%=parameters%>);
        
        if (propValues.Length == 0)
        {
			Trace.WriteVerbose("No properties to update.", Trace.GetMethodName(), CLASSNAME);
			return;
		}
        
        var helper = Database.GetDbHelper();
        StringBuilder sqlStatement =  new StringBuilder("UPDATE [<%=dataObject.Schema%>].[<%=dataObject.Name%>] SET ");
        List<DbParameter> parameterList = new List<DbParameter>();
        for (int i = 0; i < propValues.Length ; i++)
        { 
          sqlStatement.AppendFormat( "[{0}]=@{0}", propValues[i].Key);
          if (i< propValues.Length -1)
            sqlStatement.Append( ", ");

          parameterList.Add(helper.CreateInputParam("@" + propValues[i].Key, propValues[i].Value != null ? propValues[i].Value : DBNull.Value));
          
        }
        sqlStatement.Append(" WHERE ");
        <%
        for (int i= 0; i<primaryKeys.Count; i++)
		{
			DataAttribute attribute = primaryKeys[i];
			%> sqlStatement.Append("[<%=attribute.Name%>]=@<%=attribute.Name%>");
			     parameterList.Add( helper.CreateInputParam("@<%=attribute.Name%>", <%=GennieHelper.CamelCase(attribute.Name, true, true)%>));
			<%
			if ( i < primaryKeys.Count - 1)
			{%>sqlStatement.Append(" AND ");<%}
	      }%>

              int recordsAffected = helper.ExecuteText(sqlStatement.ToString(),
                                              parameterList.ToArray());
        
        if (recordsAffected == 0)
        {
          throw new DalNothingUpdatedException(string.Format("No records were updated (Table: <%=dataObject.Name%>). Id=<%=placeHolders%>", <%=parameters%>));
        }

      }
      catch (Exception ex)
      {
        Trace.WriteError("(<%=placeHolders%>)", Trace.GetMethodName(), CLASSNAME, ex, <%=parameters%>);
        throw DbHelper.TranslateException(ex);
      }

      }
<% } // end  if ((dataObject.GetAll( DataAttributeField.PrimaryKey).Count > 0) && (dataObject.Count > dataObject.GetAll( DataAttributeField.PrimaryKey).Count)) %>

<%  if (dataObject.GetAll( DataAttributeField.PrimaryKey).Count > 0)
{%>
		/// <summary>
		/// Get a <%=GennieHelper.Singularity(dataObject.Name)%> by id from the database
		/// </summary>
		public virtual Model.<%=GennieHelper.Singularity(dataObject.Name)%> GetById(<%
		for( int i=0; i<primaryKeys.Count; i++)
    	{
	    	DataAttribute attribute = primaryKeys[i];
	    	%><%=attribute.Type%> <%=GennieHelper.CamelCase( attribute.Name, true, true)%><%
		if (i < primaryKeys.Count-1){ %>,<% }
	    }%>)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
                
        reader = helper.ExecuteSPReader(_storedProcedure_GetById,
					<%
            for( int i=0; i<primaryKeys.Count; i++)
            {
				      DataAttribute attribute = primaryKeys[i];
				%>helper.CreateInputParam("@<%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%>", <%=GennieHelper.CamelCase( attribute.Name, true, true)%>)<%
				    if (i < primaryKeys.Count -1)
				    {%>,
                <%}
				}%>);
				
				Model.<%=GennieHelper.Singularity(dataObject.Name)%> result = null;

				if (reader.Read())
          result = Create<%=GennieHelper.Singularity(dataObject.Name)%>(reader);

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("<%=placeHolders%>", Trace.GetMethodName(), CLASSNAME, ex, <%=parameters%>);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetById = "[<%=dataObject.Schema%>].[<%=dataObject.Name%>Gennie_GetById]";
<% }  //end  if (dataObject.GetAll( DataAttributeField.PrimaryKey).Count > 0) %>

<%    foreach( DataAttribute attribute in dataObject.GetAll( DataAttributeField.ForeignKey))
        {
	        string methodName = "GetBy" + GennieHelper.PascalCase(attribute.Name, true,true);
	        string argName = GennieHelper.CamelCase( attribute.Name, true, true);
	        
        %>
		/// <summary>
		/// Get a <%=GennieHelper.Singularity(dataObject.Name)%> by <%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%> from the database
		/// </summary>
		public virtual List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> <%=methodName%>(<%=attribute.Type%> <%=argName%>)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetBy<%=GennieHelper.PascalCase(attribute.Name, true,false)%>, 
					helper.CreateInputParam("@<%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%>", <%=argName%>));
                
        List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> result = new List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>>();
				while (reader.Read())
				{
				  result.Add(Create<%=GennieHelper.Singularity(dataObject.Name)%>(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, <%=argName%>);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetBy<%=GennieHelper.PascalCase(attribute.Name, true,false)%> = "[<%=dataObject.Schema%>].[<%=dataObject.Name%>Gennie_GetBy<%=GennieHelper.PascalCase(attribute.Name, true,false)%>]";
		
		
<% }  //end  foreach( DataAttribute attribute in dataObject.GetAll( DataAttributeField.ForeignKey))%>		
		/// <summary>
		/// Get all <%=GennieHelper.Singularity(dataObject.Name)%> records from the database
		/// </summary>
		public virtual List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> GetAll()
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetAll);
								
				List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> result = new List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>>();
				while (reader.Read())
				{
				  result.Add(Create<%=GennieHelper.Singularity(dataObject.Name)%>(reader));
				}
				
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", Trace.GetMethodName(), CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetAll = "[<%=dataObject.Schema%>].[<%=dataObject.Name%>Gennie_GetAll]";
		
		
		
		/// <summary>
		/// Create a Model.<%=GennieHelper.Singularity(dataObject.Name)%>
		/// </summary>
		protected virtual Model.<%=GennieHelper.Singularity(dataObject.Name)%> Create<%=GennieHelper.Singularity(dataObject.Name)%>(DbDataReader reader)
		{
			try
			{	
        Model.<%=GennieHelper.Singularity(dataObject.Name)%> result = new Model.<%=GennieHelper.Singularity(dataObject.Name)%>(
<%              foreach (DataAttribute attribute in dataObject)
                {
                %><% if(attribute.NullAllowed)
                            {
                                %>          reader["<%=attribute.Name%>"] != DBNull.Value ? (<%=attribute.Type%><%
                                    if (attribute.Type != DataAttribute.DotNetTypeEnum.String)
                                    { 
                                        %>?<%
                                    }%>)          reader["<%=attribute.Name%>"] : null<%
                            }
                            else
                            {    
                                 %>          (<%=attribute.Type%>)reader["<%=attribute.Name%>"]<%
                            }
                            if (attribute != dataObject.Attribute[dataObject.Attribute.Count -1 ]) 
                            {%>, <%
                            }%>
<%
}
%>						);
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("", Trace.GetMethodName(), CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
		}	
	}
}