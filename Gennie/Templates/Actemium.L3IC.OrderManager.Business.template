<%@ Language=CSharp%><%
// Define the name the outputcode should be written to
//outputFile.PathName += (@"\Business\" + dataObject.Schema );
outputFile.PathName += (@"\Actemium.EmptyClient.Business\Gennie" );
outputFile.FileName = dataObject.Name + ".Gennie.cs";

// generation variable declarations
//String schemaNamespace = dataObject.Schema != "dbo" ? dataObject.Schema + "." : "";
String schemaNamespace = "";

bool readOnly = false;
  if ((project["readOnly"] == "1") || (project["readOnly"].ToLower() == "true"))
    readOnly = true;

 AttributeCollection primaryKeys = dataObject.GetAll(DataAttributeField.PrimaryKey);

 string placeHolders = "";
 string parameters = "";

for(int i=0; i<primaryKeys.Count; i++)
{
    DataAttribute attribute = primaryKeys[i];
    placeHolders += "{" + i.ToString() + "}";
    parameters += GennieHelper.CamelCase(attribute.Name, true, true);
    if (i < primaryKeys.Count-1)
    {
        placeHolders += ",";
        parameters += ",";
    }
}
%>using System;
using System.Collections.Generic;
using Actemium.Data.Exceptions;
using Actemium.Diagnostics;
using Actemium.UserManagement2.Business;

namespace <%=project["root-namespace"]%>.<%=schemaNamespace%>Business
{
	/// <summary>
	/// Business class for <%=dataObject.Name%> (Generated by Gennie).
<%if (dataObject.Description != null && dataObject.Description.Length > 0 && dataObject.Type != "view"){%>	/// Description: <%=dataObject.Description%>
<%}%>	/// </summary>
	public sealed partial class <%=dataObject.Name%> : <%=dataObject.Name%>Gennie
	{
		private const string CLASSNAME = nameof(<%=dataObject.Name%>);

		<% // SLP: http://msdn.microsoft.com/en-us/library/ee817670.aspx
		//Make the constuctor private, so the instance is allways called..
		//private <%=dataObject.Name%>() { } %>
		public static readonly <%=dataObject.Name%> Instance = new <%=dataObject.Name%>();
	}

	/// <summary>
	/// Business class for <%=dataObject.Name%>Gennie (Generated by Gennie).
	/// </summary>
	public abstract class <%=dataObject.Name%>Gennie
	{
		private const string CLASSNAME = nameof(<%=dataObject.Name%>Gennie);
		
<%  if (dataObject.Type != "view" && !readOnly)
{ %><%
            AttributeCollection identities = dataObject.GetAll(DataAttributeField.IdentityColumn);
            string returnType = "void";
            if (identities.Count == 1)
            {
                returnType = identities[0].Type.ToString();
            }
%> 		/// <summary>
		/// Add a new <%=GennieHelper.Singularity(dataObject.Name)%> to the database
		/// </summary>
<%          Output.Write(string.Format("\t\tpublic virtual {0} Add(Model.{1} new{1})", returnType, GennieHelper.Singularity(dataObject.Name)));
        %>
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, new<%=GennieHelper.Singularity(dataObject.Name)%>);

				CheckConstraints(new<%=GennieHelper.Singularity(dataObject.Name)%>);
				DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();

        <%if (identities.Count == 1)
        {
          Output.Write("return ");
        }
        %><%=GennieHelper.CamelCase(dataObject.Name)%>.Add(new<%=GennieHelper.Singularity(dataObject.Name)%>);
			}
			catch (DalForeignKeyException ex_fk)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex_fk, new<%=GennieHelper.Singularity(dataObject.Name)%>);
        throw new BusinessException(string.Format("No related object found in {0}", ex_fk.Table), ex_fk);
      }
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, new<%=GennieHelper.Singularity(dataObject.Name)%>);
				throw;
			}
		}


		/// <summary>
		/// Check Datafield constraints
		/// </summary>
		protected virtual void CheckConstraints(Model.<%=GennieHelper.Singularity(dataObject.Name)%> <%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>)
		{
			//Range checks, etc checks go here
<%		foreach (DataAttribute attribute in dataObject)
			{
				switch(attribute.Type)
				{
					case DataAttribute.DotNetTypeEnum.String:
						if (attribute.TypeLength.ToUpper() != "MAX")
						{

						  if (!attribute.NullAllowed)
						  {			  
						    Output.Write(string.Format("			if ({0}.{1} == null)", GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name)), GennieHelper.PascalCase(attribute.Name, true,true)));			    
							Output.WriteLine();			
							Output.WriteLine(string.Format("			  throw new BusinessException(string.Format(\"{0} may not be NULL. ({{0}})\", {1}.{0}));",
													 GennieHelper.PascalCase( attribute.Name, true,true ),
													 GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))));	
							Output.WriteLine();																	    					    
						  }

						  if (attribute.NullAllowed)
						    Output.Write(string.Format("			if ({0}.{1} != null && {0}.{1}.Length > {2})", GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name)), GennieHelper.PascalCase(attribute.Name, true,true), attribute.TypeLength));
						  else
						    Output.Write(string.Format("			if ({0}.{1}.Length > {2})", GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name)), GennieHelper.PascalCase(attribute.Name, true,true), attribute.TypeLength));
						  
						  Output.WriteLine();			
						  Output.WriteLine(string.Format("			  throw new BusinessException(string.Format(\"{0} may not be longer than {1} characters. ({{0}})\", {2}.{0}));",
							           GennieHelper.PascalCase( attribute.Name, true,true ),
							           attribute.TypeLength,
							           GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))));
						  Output.WriteLine();
						}
						break;
				}
			}
%>		}

<%      if (primaryKeys.Count > 0 && !readOnly)
        {%>
		/// <summary>
		/// Delete the given <%=GennieHelper.Singularity(dataObject.Name)%> from the database
		/// </summary>
		public virtual void Delete(Model.<%=GennieHelper.Singularity(dataObject.Name)%> del<%=GennieHelper.Singularity(dataObject.Name)%>)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, del<%=GennieHelper.Singularity(dataObject.Name)%>);

				//Begin Checks
				if (!Exists(del<%=GennieHelper.Singularity(dataObject.Name)%>))
					throw new BusinessException(string.Format("There is no <%=GennieHelper.Singularity(dataObject.Name)%> with this id. ({0})", del<%=GennieHelper.Singularity(dataObject.Name)%>));

				DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();
				<%=GennieHelper.CamelCase(dataObject.Name)%>.Delete(del<%=GennieHelper.Singularity(dataObject.Name)%>);
			}
			catch (DalForeignKeyException ex_fk)
      {
        Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex_fk, del<%=GennieHelper.Singularity(dataObject.Name)%>);
        throw new BusinessException(string.Format("The <%=GennieHelper.Singularity(dataObject.Name)%> is still used by {0}", ex_fk.Table), ex_fk);
      }
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, del<%=GennieHelper.Singularity(dataObject.Name)%>);
				throw;
			}
		}
<% }  %>
<%      if ((primaryKeys.Count > 0) && (dataObject.Count > primaryKeys.Count) && !readOnly)
        {%>
		/// <summary>
		/// Modify the given <%=GennieHelper.Singularity(dataObject.Name)%> in the database
		/// </summary>
		public virtual void Modify(Model.<%=GennieHelper.Singularity(dataObject.Name)%> modified<%=GennieHelper.Singularity(dataObject.Name)%>)
		{
			try
			{
				Trace.WriteInformation("({0})", Trace.GetMethodName(), CLASSNAME, modified<%=GennieHelper.Singularity(dataObject.Name)%>);

				//Begin Checks
				CheckConstraints(modified<%=GennieHelper.Singularity(dataObject.Name)%>);

				if (!Exists(modified<%=GennieHelper.Singularity(dataObject.Name)%>))
					throw new BusinessException(string.Format("There is no <%=GennieHelper.Singularity(dataObject.Name)%> with this id. ({0})", modified<%=GennieHelper.Singularity(dataObject.Name)%>));

				DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();
				<%=GennieHelper.CamelCase(dataObject.Name)%>.Modify(modified<%=GennieHelper.Singularity(dataObject.Name)%>);
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, modified<%=GennieHelper.Singularity(dataObject.Name)%>);
				throw;
			}
		}
		
		/// <summary>
		/// Modify only the specified properties of the <%=GennieHelper.Singularity(dataObject.Name)%> 
		/// specified by:
		/// </summary>
		<%

		for(int i=0; i<primaryKeys.Count; i++)
    {
	    DataAttribute attribute = primaryKeys[i];
	    %>/// <param name="<%=GennieHelper.CamelCase(attribute.Name, true, true)%>">PK</param><%
	      }%>
	    /// <param name="propValues">Properties to change</param>
		public virtual void Modify(<%
		
		for(int i=0; i<primaryKeys.Count; i++)
		{
			DataAttribute attribute = primaryKeys[i];
			%><%=attribute.Type%> <%=GennieHelper.CamelCase(attribute.Name, true, true)%>, <%
	      }%> params KeyValuePair<string,object>[] propValues)
		{
			try
			{
				Trace.WriteInformation("(<%=placeHolders%>, {<%=primaryKeys.Count%>})", Trace.GetMethodName(), CLASSNAME, <%=parameters%>, string.Join(",", propValues));

				DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();
				<%=GennieHelper.CamelCase(dataObject.Name)%>.Modify(
				<%
		for(int i=0; i<primaryKeys.Count; i++)
		{
			DataAttribute attribute = primaryKeys[i];
			%><%=GennieHelper.CamelCase(attribute.Name, true, true)%>, <%
	      }%>
				propValues);
				return;
			}
			catch (Exception ex)
			{
				Trace.WriteError("(<%=placeHolders%>)", Trace.GetMethodName(), CLASSNAME, ex, <%=parameters%>);
				throw;
			}
		}
<%  }

  }  %>

		/// <summary>
		/// Get all <%=GennieHelper.Singularity(dataObject.Name)%> records from the database
		/// </summary>
		public virtual List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> GetAll()
		{
			try
			{
				DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();
				List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> result = <%=GennieHelper.CamelCase(dataObject.Name)%>.GetAll();

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", Trace.GetMethodName(), CLASSNAME, ex);
				throw;
			}
		}
<% if (dataObject.Type != "view")  { %>
<%   if (primaryKeys.Count > 0)     {%>
		/// <summary>
		/// Get a <%=GennieHelper.Singularity(dataObject.Name)%> by id from the database
		/// </summary>
		public virtual Model.<%=GennieHelper.Singularity(dataObject.Name)%> GetById(<%

		for(int i=0; i<primaryKeys.Count; i++)
    {
	    DataAttribute attribute = primaryKeys[i];
	    %><%=attribute.Type%> <%=GennieHelper.CamelCase(attribute.Name, true, true)%><%
		    if (i < primaryKeys.Count-1){ %> ,<% }
	      }%>)
		{
		  try
			{
		    DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();
				Model.<%=GennieHelper.Singularity(dataObject.Name)%> result = <%=GennieHelper.CamelCase(dataObject.Name)%>.GetById(<%
          for(int i=0; i<primaryKeys.Count; i++)
          {
	          DataAttribute attribute = primaryKeys[i];
	          %><%=GennieHelper.CamelCase(attribute.Name, true, true)
	          %><%if (i < primaryKeys.Count -1)
		          {%>, <%} }%>);
			  return result;
			}
			catch (Exception ex)
			{
			  Trace.WriteError("<%=placeHolders%>", Trace.GetMethodName(), CLASSNAME, ex, <%=parameters%>);
			  throw;
			}
		}
<% }  //end  if (primaryKeys.Count > 0)%>
<%foreach(DataAttribute attribute in dataObject.GetAll(DataAttributeField.ForeignKey))
{
	string methodName = "GetBy" + GennieHelper.PascalCase(attribute.Name, true, true);
	string argName = GennieHelper.CamelCase(attribute.Name, true, true);%>
		/// <summary>
		/// Get a <%=GennieHelper.Singularity(dataObject.Name)%> by <%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%> from the database
		/// </summary>
		public virtual List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> <%=methodName%>(<%=attribute.Type%> <%=argName%>)
		{
			try
			{
				DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();
				List<Model.<%=GennieHelper.Singularity(dataObject.Name)%>> result = <%=GennieHelper.CamelCase(dataObject.Name)%>.<%=methodName%>(<%=argName%>);

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, <%=argName%>);
				throw;
			}
		}
<%}%>
<%     if (primaryKeys.Count > 0)  {%>
		/// <summary>
		/// Equals function to compare class
		/// </summary> 
		public virtual bool Exists(Model.<%=GennieHelper.Singularity(dataObject.Name)%> <%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>)
		{
		  try
			{
				return (this.GetById(<%
          for(int i=0; i<primaryKeys.Count; i++)
          {
				    DataAttribute attribute = primaryKeys[i];
				%><%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>.<%=GennieHelper.PascalCase(attribute.Name, true,true)%><%
				    if (i < primaryKeys.Count -1)
				    {%>,
               <%}
			  }%>) != null);
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", Trace.GetMethodName(), CLASSNAME, ex, <%=GennieHelper.CamelCase(GennieHelper.Singularity(dataObject.Name))%>);
				throw;
			}
		}


		/// <summary>
		/// Equals function to compare class
		/// </summary> 
		public virtual bool Exists(<%
		for(int i=0; i<primaryKeys.Count; i++)
    {
	    DataAttribute attribute = primaryKeys[i];
	    %><%=attribute.Type%> <%=GennieHelper.CamelCase(attribute.Name, true, true)%> <%
		  if (i < primaryKeys.Count-1){ %>,<% }
	    }%>)
		{
		  try
		  {
				DataAccess.<%=dataObject.Name%> <%=GennieHelper.CamelCase(dataObject.Name)%> = new DataAccess.<%=dataObject.Name%>();
				return <%=GennieHelper.CamelCase(dataObject.Name)%>.GetById(<%
          for(int i=0; i<primaryKeys.Count; i++)
          {
				    DataAttribute attribute = primaryKeys[i];
				    %><%=GennieHelper.CamelCase(attribute.Name, true, true)%><%
				      if (i < primaryKeys.Count -1)
				      {%>, <%}
				 }%>) != null;
			}
		  catch (Exception ex)
			{
			  Trace.WriteError("<%=placeHolders%>", Trace.GetMethodName(), CLASSNAME, ex, <%=parameters%>);
				throw;
			}
		}    
<% }  }  %>
	}
}