<%@ Language=CSharp%><%
  // Define the name the outputcode should be written to
  //outputFile.PathName += (@"\Model\" + dataObject.Schema );
  outputFile.PathName += (@"\Actemium.EmptyClient.Model\Gennie" );
  outputFile.FileName =  GennieHelper.Singularity(dataObject.Name) + ".Gennie.cs";

  //String schemaNamespace = dataObject.Schema != "dbo" ? dataObject.Schema + "." : "";
  String schemaNamespace = "";
  
  AttributeCollection primaryKeys = dataObject.GetAll( DataAttributeField.PrimaryKey);


    string ConstructorParams = "";
    string ConstructorParams2 = "";
    string ConstructorFields = "";
    foreach(DataAttribute attribute in dataObject)
	{
	    if (ConstructorParams != "")
	    {
	        ConstructorParams += ", ";
	        ConstructorParams2 += ", ";
	        ConstructorFields += @"\r\n";
	    }
			ConstructorParams += attribute.Type;
      if (attribute.NullAllowed && (attribute.Type != DataAttribute.DotNetTypeEnum.String))
        ConstructorParams += "?";
      ConstructorParams += " " + GennieHelper.CamelCase(attribute.Name, true);
      ConstructorParams2 += GennieHelper.CamelCase(attribute.Name, true, true);
      ConstructorFields += string.Format("\t\t\t_{0} = {1};", GennieHelper.CamelCase(attribute.Name, true), GennieHelper.CamelCase(attribute.Name, true));
    }

%>using System;

namespace <%=project["root-namespace"]%>.<%=schemaNamespace%>Model
{

	/// <summary>
	/// Object model class for <%=dataObject.Name%>
<%if (dataObject.Description != null && dataObject.Description.Length > 0 && dataObject.Type != "view"){%>	/// Description: <%=dataObject.Description%>
<%}%>	/// </summary>
	[Serializable]
	public partial class <%=GennieHelper.Singularity(dataObject.Name)%> : <%=GennieHelper.Singularity(dataObject.Name)%>Gennie
  {
		private const string CLASSNAME = nameof(<%=GennieHelper.Singularity(dataObject.Name)%>);

		public <%=GennieHelper.Singularity(dataObject.Name)%>() : base() { }

		public <%=GennieHelper.Singularity(dataObject.Name)%>(<%=ConstructorParams%>)
			: base(<%=ConstructorParams2%>)
		{

		}
  }


	/// <summary>
	/// Object model class for <%=dataObject.Name%>Gennie (Generated by Gennie)
	/// </summary>
	[Serializable]
	public abstract class <%=GennieHelper.Singularity(dataObject.Name)%>Gennie
	{
		private const string CLASSNAME = nameof(<%=GennieHelper.Singularity(dataObject.Name)%>Gennie);


		/// <summary>
		/// Default constructor
		/// </summary>
		public <%=GennieHelper.Singularity(dataObject.Name)%>Gennie()
		{
		    //Empty constructor
		}


		/// <summary>
		/// Constructor with all parameters
		/// </summary>
		public <%=GennieHelper.Singularity(dataObject.Name)%>Gennie(<%=ConstructorParams%>)
		{
<%=ConstructorFields%>
		}


<%foreach (DataAttribute attribute in dataObject)
{%>		/// <summary>
		/// Property: <%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%>
<%if (attribute.Description != string.Empty) {
%>		/// Description: <%=GennieHelper.RemoveHungarianPrefix(attribute.Description)%>
<%}  //end if (attribute.Description != string.Empty)
%>		/// </summary>
    public <%=attribute.Type%><%if (attribute.NullAllowed && (attribute.Type != DataAttribute.DotNetTypeEnum.String)){%>?<%}%> <%=GennieHelper.RemoveHungarianPrefix(attribute.Name)%>
		{
			set { _<%=GennieHelper.CamelCase(attribute.Name, true)%> = value; }
			get { return _<%=GennieHelper.CamelCase(attribute.Name, true)%>; }
		} protected <%=attribute.Type%><%if (attribute.NullAllowed && (attribute.Type != DataAttribute.DotNetTypeEnum.String)){%>?<%}%> _<%=GennieHelper.CamelCase(attribute.Name, true)%>;


<%		}  //end foreach
%>    /// <summary>
		/// Override the default ToString function to show all properties of the class
		/// </summary>
    public override string ToString()
    {
      return string.Format("<%=GennieHelper.Singularity(dataObject.Name)%>:<%
	      int i=0;
				foreach(DataAttribute attribute in dataObject)
				{
			    Output.Write( attribute.Name + "={" + i.ToString() + "}");
			    if (attribute != dataObject.Attribute[dataObject.Count-1])
			      Output.Write( ", ");
					i = i + 1;
			  }
			%>", 
			<%
			i = 0;
			foreach(DataAttribute attribute in dataObject)
			{
			    %>_<%=GennieHelper.CamelCase(attribute.Name, true)%><%
			    if (attribute != dataObject.Attribute[dataObject.Count-1])
			        Output.Write( ", ");
			    i = i + 1;
			}
			%>);
    }
    
<%  if (dataObject.Type != "view")
{  %>    
		/// <summary>
		/// Override the default Equals function to compare class
		/// </summary>    
    public override bool Equals(object obj)
    {
<%
	    if (primaryKeys.Count == 1)
		  {
		    Output.WriteLine(string.Format("\t\t\tif (obj is {0})", primaryKeys[0].Type));
		    Output.WriteLine("\t\t\t{");
		    Output.WriteLine(string.Format("\t\t\t\treturn ({0} == ({1})obj);" ,GennieHelper.PascalCase(primaryKeys[0].Name, true, true),primaryKeys[0].Type ));
		    Output.WriteLine("\t\t\t}");
		    Output.WriteLine("\t\t\telse");
		  }
		  else if (primaryKeys.Count > 1)
		  {
		    Output.WriteLine("\t\t\tif (obj.GetType().IsArray)");
		    Output.WriteLine("\t\t\t{");
		    Output.WriteLine(string.Format("\t\t\t\t\tif ((((object[])obj).Length == {0})",primaryKeys.Count));
		    for ( int j =0; j < primaryKeys.Count;j++)
        {
          Output.WriteLine( string.Format("\t\t\t\t\t\t&& (((object[])obj)[{0}] is {1})",j, primaryKeys[j].Type));
        }
        Output.WriteLine( "\t\t\t)");
        Output.WriteLine( "\t\t\t{");
        Output.Write( "\t\t\treturn ( ");
        for ( int j =0; j < primaryKeys.Count;j++)
        {
          if (j>0)
          {
            Output.Write ( " &&\n                  ");
          }
          Output.Write( string.Format("(this.{0} == ({1})((object[])obj)[{2}])",GennieHelper.PascalCase(primaryKeys[j].Name, true,true), primaryKeys[j].Type,j));
        }
        Output.Write(");\n");
        Output.WriteLine( "\t\t\t\t}");
        Output.WriteLine( "\t\t\t}");
        Output.WriteLine( "\t\t\telse");
      }

      Output.WriteLine( string.Format("\t\t\t\tif (obj is {0})", GennieHelper.Singularity(dataObject.Name)));
			Output.WriteLine( string.Format("\t\t\t\t\treturn Equals(({0})obj);", GennieHelper.Singularity(dataObject.Name)));

      Output.WriteLine( "\t\t\treturn false;");%>
		}


		/// <summary>
		/// Equals function to compare class
		/// </summary>    
		public virtual bool Equals(<%=GennieHelper.Singularity(dataObject.Name)%> obj)
		{
			<%
			string equalsExpression = "";

			foreach(DataAttribute attribute in dataObject)
	    {
		    if (attribute.PrimaryKey)
		    {
			    if (equalsExpression != "")
				    equalsExpression += " && ";
			    equalsExpression += string.Format("(this.{0}.Equals((({1})obj).{0}))", GennieHelper.PascalCase(attribute.Name, true,true), GennieHelper.Singularity(dataObject.Name));
			  }
			}
			Output.WriteLine("return ({0});", equalsExpression);
%>		}


		/// <summary>
		/// Override the default GetHashCode
		/// </summary> 
		public override int GetHashCode()
		{
		  int result = 0;
		  <%
		  for ( int j = 0; j < primaryKeys.Count;j++)
		  {
	      Output.WriteLine("result {0}= {1}.GetHashCode();", ( j > 0) ? "^" : string.Empty, GennieHelper.PascalCase(primaryKeys[j].Name, true,true));
		  }%>
		  return result;
		}
		<%  } //end    if (dataObject.Type != "view")%>
  }
}
