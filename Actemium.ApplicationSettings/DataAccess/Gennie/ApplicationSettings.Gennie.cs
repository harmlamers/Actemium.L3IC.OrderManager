using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Collections.Generic;
using Actemium.Diagnostics;
using Actemium.Data.Common;
using Actemium.Data.Exceptions;

namespace Actemium.ApplicationSettings.DataAccess
{
	/// <summary>
	/// Data access to the data in table ApplicationSettings in the database (Generated by Gennie)
	/// </summary>
	public partial class ApplicationSettings : ApplicationSettingsGennie
	{
		private const string CLASSNAME = nameof(ApplicationSettings);

	}

	/// <summary>
	/// Data access to the data in table ApplicationSettingsGennie in the database (Generated by Gennie)
	/// </summary>
	public abstract class ApplicationSettingsGennie
	{
		private const string CLASSNAME = nameof(ApplicationSettingsGennie);


		/// <summary>
		/// Add a new ApplicationSetting to the database
		/// </summary>
		public virtual void Add(Model.ApplicationSetting newApplicationSetting)
		{
			try
			{
				Trace.WriteVerbose("({0})", "Add", CLASSNAME, newApplicationSetting.ToString());
				var helper = Database.GetDbHelper();


				int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Add,
					helper.CreateInputParam("@ApplicationSettingId", newApplicationSetting.ApplicationSettingId),
					helper.CreateInputParam("@ApplicationSettingsCategoryId", newApplicationSetting.ApplicationSettingsCategoryId),
					helper.CreateInputParam("@Name", newApplicationSetting.Name),
					helper.CreateInputParam("@Description", newApplicationSetting.Description),
					helper.CreateInputParam("@DataTypeId", newApplicationSetting.DataTypeId),
					helper.CreateInputParam("@Value", newApplicationSetting.Value),
					helper.CreateInputParam("@ListId", newApplicationSetting.ListId.HasValue ? (object)newApplicationSetting.ListId : DBNull.Value));

				if (recordsAffected == 0)
					throw new DalNothingUpdatedException("Unable to add ApplicationSetting with ApplicationSettingId={0}", newApplicationSetting);

return;
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "Add", CLASSNAME, ex, newApplicationSetting.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Add = "[AS].[ApplicationSettingsGennie_Add]";
		


		/// <summary>
		/// Delete the given ApplicationSetting from the database
		/// </summary>
		public virtual void Delete(Model.ApplicationSetting applicationSetting)
		{
			try
			{
				Trace.WriteVerbose("({0})", "Delete", CLASSNAME, applicationSetting.ToString());

        var helper = Database.GetDbHelper();
				helper.ExecuteSPNonQuery(_storedProcedure_Delete,
					helper.CreateInputParam("@ApplicationSettingId", applicationSetting.ApplicationSettingId));
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "Delete", CLASSNAME, ex, applicationSetting.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}

    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_Delete = "[AS].[ApplicationSettingsGennie_Delete]";



		/// <summary>
		/// Modify the given ApplicationSetting in the database
		/// </summary>
		public virtual void Modify(Model.ApplicationSetting modifiedApplicationSetting)
		{
			try
			{
				Trace.WriteVerbose("({0})", "Modify", CLASSNAME, modifiedApplicationSetting.ToString());

				var helper = Database.GetDbHelper();
        int recordsAffected = helper.ExecuteSPNonQuery(_storedProcedure_Modify,
					helper.CreateInputParam("@ApplicationSettingId", modifiedApplicationSetting.ApplicationSettingId),
					helper.CreateInputParam("@ApplicationSettingsCategoryId", modifiedApplicationSetting.ApplicationSettingsCategoryId),
					helper.CreateInputParam("@Name", modifiedApplicationSetting.Name),
					helper.CreateInputParam("@Description", modifiedApplicationSetting.Description),
					helper.CreateInputParam("@DataTypeId", modifiedApplicationSetting.DataTypeId),
					helper.CreateInputParam("@Value", modifiedApplicationSetting.Value),
					helper.CreateInputParam("@ListId", modifiedApplicationSetting.ListId.HasValue ? (object)modifiedApplicationSetting.ListId : DBNull.Value));

				if (recordsAffected == 0)
				{
					throw new DalNothingUpdatedException("No records were updated (Table: ApplicationSettings). ApplicationSetting=" + modifiedApplicationSetting.ToString());
				}
			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "Modify", CLASSNAME, ex, modifiedApplicationSetting.ToString());
				throw DbHelper.TranslateException(ex);
			}
		}
		
            /// <summary>
            /// String containing stored procedure name
            /// </summary>
	    protected string _storedProcedure_Modify = "[AS].[ApplicationSettingsGennie_Modify]";
		
	/// <summary>
	/// Modify only the specified properties of the ApplicationSetting 
	/// specified by:
	/// </summary>
		/// <param name="applicationSettingId">PK</param>
	/// <param name="propValues">Properties to update</param>
		public virtual void Modify( Int32 applicationSettingId,  params KeyValuePair<string,object>[] propValues)
		{
			 try
      {
        Trace.WriteVerbose("({0})", "Modify", CLASSNAME, applicationSettingId);
        
        if (propValues.Length == 0)
        {
			Trace.WriteVerbose("No properties to update.", "Modify", CLASSNAME);
			return;
		}
        
        var helper = Database.GetDbHelper();
        StringBuilder sqlStatement =  new StringBuilder("UPDATE [AS].[ApplicationSettings] SET ");
        List<DbParameter> parameterList = new List<DbParameter>();
        for (int i = 0; i < propValues.Length ; i++)
        { 
          sqlStatement.AppendFormat( "[{0}]=@{0}", propValues[i].Key);
          if (i< propValues.Length -1)
            sqlStatement.Append( ", ");

          parameterList.Add(helper.CreateInputParam("@" + propValues[i].Key, propValues[i].Value != null ? propValues[i].Value : DBNull.Value));
          
        }
        sqlStatement.Append(" WHERE ");
         sqlStatement.Append("[ApplicationSettingId]=@ApplicationSettingId");
			     parameterList.Add( helper.CreateInputParam("@ApplicationSettingId", applicationSettingId));
			

              int recordsAffected = helper.ExecuteText(sqlStatement.ToString(),
                                              parameterList.ToArray());
        
        if (recordsAffected == 0)
        {
          throw new DalNothingUpdatedException(string.Format("No records were updated (Table: ApplicationSettings). Id={0}", applicationSettingId));
        }

      }
      catch (Exception ex)
      {
        Trace.WriteError("({0})", "Modify", CLASSNAME, ex, applicationSettingId);
        throw DbHelper.TranslateException(ex);
      }

      }



		/// <summary>
		/// Get a ApplicationSetting by id from the database
		/// </summary>
		public virtual Model.ApplicationSetting GetById(Int32 applicationSettingId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
                
        reader = helper.ExecuteSPReader(_storedProcedure_GetById,
					helper.CreateInputParam("@ApplicationSettingId", applicationSettingId));
				
				Model.ApplicationSetting result = null;

				if (reader.Read())
          result = CreateApplicationSetting(reader);

				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("{0}", "GetById", CLASSNAME, ex, applicationSettingId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
    /// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetById = "[AS].[ApplicationSettingsGennie_GetById]";



		/// <summary>
		/// Get a ApplicationSetting by ApplicationSettingsCategoryId from the database
		/// </summary>
		public virtual List<Model.ApplicationSetting> GetByApplicationSettingsCategoryId(Int32 applicationSettingsCategoryId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetByApplicationSettingsCategoryId, 
					helper.CreateInputParam("@ApplicationSettingsCategoryId", applicationSettingsCategoryId));
                
        List<Model.ApplicationSetting> result = new List<Model.ApplicationSetting>();
				while (reader.Read())
				{
				  result.Add(CreateApplicationSetting(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "GetByApplicationSettingsCategoryId", CLASSNAME, ex, applicationSettingsCategoryId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetByApplicationSettingsCategoryId = "[AS].[ApplicationSettingsGennie_GetByApplicationSettingsCategoryId]";
		
		

		/// <summary>
		/// Get a ApplicationSetting by DataTypeId from the database
		/// </summary>
		public virtual List<Model.ApplicationSetting> GetByDataTypeId(Int32 dataTypeId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetByDataTypeId, 
					helper.CreateInputParam("@DataTypeId", dataTypeId));
                
        List<Model.ApplicationSetting> result = new List<Model.ApplicationSetting>();
				while (reader.Read())
				{
				  result.Add(CreateApplicationSetting(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "GetByDataTypeId", CLASSNAME, ex, dataTypeId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetByDataTypeId = "[AS].[ApplicationSettingsGennie_GetByDataTypeId]";
		
		

		/// <summary>
		/// Get a ApplicationSetting by ListId from the database
		/// </summary>
		public virtual List<Model.ApplicationSetting> GetByListId(Int32 listId)
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetByListId, 
					helper.CreateInputParam("@ListId", listId));
                
        List<Model.ApplicationSetting> result = new List<Model.ApplicationSetting>();
				while (reader.Read())
				{
				  result.Add(CreateApplicationSetting(reader));
				}
				return result;

			}
			catch (Exception ex)
			{
				Trace.WriteError("({0})", "GetByListId", CLASSNAME, ex, listId);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetByListId = "[AS].[ApplicationSettingsGennie_GetByListId]";
		
		
		
		/// <summary>
		/// Get all ApplicationSetting records from the database
		/// </summary>
		public virtual List<Model.ApplicationSetting> GetAll()
		{
			DbDataReader reader = null;
			try
			{
        var helper = Database.GetDbHelper();
        reader = helper.ExecuteSPReader(_storedProcedure_GetAll);
								
				List<Model.ApplicationSetting> result = new List<Model.ApplicationSetting>();
				while (reader.Read())
				{
				  result.Add(CreateApplicationSetting(reader));
				}
				
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("()", "GetAll", CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
			finally 
			{
				if (reader != null)
					reader.Close();
			}
		}
		
		/// <summary>
    /// String containing stored procedure name
    /// </summary>
		protected string _storedProcedure_GetAll = "[AS].[ApplicationSettingsGennie_GetAll]";
		
		
		
		/// <summary>
		/// Create a Model.ApplicationSetting
		/// </summary>
		protected virtual Model.ApplicationSetting CreateApplicationSetting(DbDataReader reader)
		{
			try
			{	
        Model.ApplicationSetting result = new Model.ApplicationSetting(
          (Int32)reader["ApplicationSettingId"], 
          (Int32)reader["ApplicationSettingsCategoryId"], 
          (String)reader["Name"], 
          (String)reader["Description"], 
          (Int32)reader["DataTypeId"], 
          (String)reader["Value"], 
          reader["ListId"] != DBNull.Value ? (Int32?)          reader["ListId"] : null
						);
				return result;
			}
			catch (Exception ex)
			{
				Trace.WriteError("", "CreateApplicationSetting", CLASSNAME, ex);
				throw DbHelper.TranslateException(ex);
			}
		}	
	}
}